# This code is licensed from CircleCI to the user under the MIT license.
# See here for details: https://circleci.com/developer/orbs/licensing
version: 2.1
description: |
    Easily install Node.js and its package managers (npm, yarn). Best of all, install your packages with caching enabled by default. Supports Linux x86_64, MacOS, and Arm64 V8.
display:
    home_url: https://nodejs.org/
    source_url: https://github.com/circleci-public/node-orb
commands:
    install:
        description: |
            Install custom versions of Node.js, and optionally NPM/Yarn, in any
            execution environment (Docker/Linux, macOS, machine) that does not have
            it preinstalled.

            Recommendation: It is highly recommended to utilize an environment such as Docker with Node preinstalled.
        parameters:
            install-yarn:
                default: false
                description: Install Yarn?
                type: boolean
            node-install-dir:
                default: /usr/local
                description: |
                    Where should Node.js be installed?
                type: string
            node-version:
                default: ""
                description: |
                    Specify the full version tag to install. To install the latest version, set the version to `latest`. If unspecified, the version listed in .nvmrc will be installed. If no .nvmrc file exists the active LTS version of Node.js will be installed by default. For a full list of releases, see the following: https://nodejs.org/en/download/releases
                type: string
            yarn-version:
                default: ""
                description: |
                    Pick a version of Yarn to install (if no version is specified, the latest stable version will be installed): https://github.com/yarnpkg/yarn/releases
                type: string
        steps:
            - run:
                command: "# Only install nvm if it's not already installed\nif command -v nvm &> /dev/null; then\n    echo \"nvm is already installed. Skipping nvm install.\";\nelse\n    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash;\n    \n    echo 'export NVM_DIR=\"$HOME/.nvm\"' >> \"$BASH_ENV\";\n    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" --no-use' >> \"$BASH_ENV\";\n    \n    # shellcheck source=/dev/null\n    source \"$BASH_ENV\";\nfi\n\n# See: https://github.com/nvm-sh/nvm#usage\nif [ \"$NODE_PARAM_VERSION\" = \"latest\" ]; then\n    # When no version is specified we default to the latest version of Node\n    NODE_ORB_INSTALL_VERSION=$(nvm ls-remote | tail -n1 | grep -Eo 'v[0-9]+\\.[0-9]+\\.[0-9]+')\n    nvm install \"$NODE_ORB_INSTALL_VERSION\" # aka nvm install node. We're being explicit here.\n    nvm alias default \"$NODE_ORB_INSTALL_VERSION\"\nelif [ -n \"$NODE_PARAM_VERSION\" ] && [ \"$NODE_PARAM_VERSION\" != \"lts\" ]; then\n    nvm install \"$NODE_PARAM_VERSION\"\n    nvm alias default \"$NODE_PARAM_VERSION\"\nelif [ -f \".nvmrc\" ]; then\n    NVMRC_SPECIFIED_VERSION=$(<.nvmrc)\n    nvm install \"$NVMRC_SPECIFIED_VERSION\"\n    nvm alias default \"$NVMRC_SPECIFIED_VERSION\"\nelse\n    nvm install --lts\n    nvm alias default lts/*\nfi\n\necho 'nvm use default &>/dev/null' >> \"$BASH_ENV\"\n"
                environment:
                    NODE_PARAM_VERSION: <<parameters.node-version>>
                name: Install Node.js <<parameters.node-version>>
            - when:
                condition: <<parameters.install-yarn>>
                steps:
                    - install-yarn:
                        version: <<parameters.yarn-version>>
    install-packages:
        description: |
            Install your Node packages with automated caching and best practices applied. Requires lock file.
        parameters:
            app-dir:
                default: .
                description: Path to the directory containing your package.json file. Not needed if package.json lives in the root.
                type: string
            cache-only-lockfile:
                default: true
                description: |
                    If true, package.json will be ignored in the cache key. Useful for projects where package.json changes do not always invalidate dependencies.
                    Note: package.json will still be the final fallback key incase a project is not configured with a lock file.
                type: boolean
            cache-path:
                default: ""
                description: |
                    By default, this orb will utilize 'npm ci' and cache the '~/.npm' directory. Override which path to cache with this parameter.
                type: string
            cache-version:
                default: v1
                description: Change the default cache version if you need to clear the cache for any reason.
                type: string
            check-cache:
                default: never
                description: |
                    Yarn berry only for Zero install support -
                    Use 'always' to always --check-cache argument to yarn install.
                    Use 'detect' to enable caching of yarn.lock and to only add when required.
                enum:
                    - never
                    - always
                    - detect
                type: enum
            include-branch-in-cache-key:
                default: true
                description: |
                    If true, this cache bucket will only apply to jobs within the same branch.
                type: boolean
            override-ci-command:
                default: ""
                description: |
                    By default, packages will be installed with "npm ci", "yarn install --frozen-lockfile" or "yarn install --immutable".
                    Optionally supply a custom package installation command, with any additional flags needed.
                type: string
            pkg-manager:
                default: npm
                description: Select the default node package manager to use. NPM v5+ Required.
                enum:
                    - npm
                    - yarn
                    - yarn-berry
                type: enum
            with-cache:
                default: true
                description: Cache your node packages automatically for faster install times.
                type: boolean
        steps:
            - run:
                command: |-
                    # Fail if package.json does not exist in working directory

                    if [ ! -f "package.json" ]; then
                        echo
                        echo "---"
                        echo "Unable to find your package.json file. Did you forget to set the app-dir parameter?"
                        echo "---"
                        echo
                        echo "Current directory: $(pwd)"
                        echo
                        echo
                        echo "List directory: "
                        echo
                        ls
                        exit 1
                    fi
                name: Checking for package.json
                working_directory: <<parameters.app-dir>>
            - when:
                condition: << parameters.with-cache >>
                steps:
                    - run:
                        command: |
                            TARGET_DIR="/tmp"
                            if [ -n "$HOMEDRIVE" ]; then
                                TARGET_DIR="$HOMEDRIVE\\tmp"
                            fi

                            # Link corresponding lock file to a temporary file used by cache commands
                            if [ -f "package-lock.json" ]; then
                                echo "Found package-lock.json file, assuming lockfile"
                                cp package-lock.json $TARGET_DIR/node-project-lockfile
                            elif [ -f "npm-shrinkwrap.json" ]; then
                                echo "Found npm-shrinkwrap.json file, assuming lockfile"
                                cp npm-shrinkwrap.json $TARGET_DIR/node-project-lockfile
                            elif [ -f "yarn.lock" ]; then
                                echo "Found yarn.lock file, assuming lockfile"
                                cp yarn.lock $TARGET_DIR/node-project-lockfile
                            fi

                            cp package.json $TARGET_DIR/node-project-package.json
                        name: Determine lockfile
                        working_directory: <<parameters.app-dir>>
                    - restore_cache:
                        keys:
                            - node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                            - node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>{{ checksum "/tmp/node-project-package.json" }}
                            - node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>
            - when:
                condition:
                    equal:
                        - npm
                        - << parameters.pkg-manager >>
                steps:
                    - run:
                        command: |-
                            # Configure npm cache path if provided
                            if [[ -n "$PARAM_CACHE_PATH" ]]; then
                                npm config set cache "$PARAM_CACHE_PATH"
                            fi

                            # Run override ci command if provided, otherwise run default npm install
                            if [[ -n "$PARAM_OVERRIDE_COMMAND" ]]; then
                                echo "Running override package installation command:"
                                eval "$PARAM_OVERRIDE_COMMAND"
                            else
                                npm ci
                            fi
                        environment:
                            PARAM_CACHE_PATH: << parameters.cache-path >>
                            PARAM_OVERRIDE_COMMAND: << parameters.override-ci-command >>
                        name: Installing NPM packages
                        working_directory: <<parameters.app-dir>>
                    - when:
                        condition: << parameters.with-cache >>
                        steps:
                            - when:
                                condition: << parameters.cache-path >>
                                steps:
                                    - save_cache:
                                        key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                                        paths:
                                            - << parameters.cache-path >>
                            - unless:
                                condition: << parameters.cache-path >>
                                steps:
                                    - save_cache:
                                        key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                                        paths:
                                            - ~/.npm
            - when:
                condition:
                    equal:
                        - yarn
                        - << parameters.pkg-manager >>
                steps:
                    - run:
                        command: |-
                            # Run override ci command if provided, otherwise run default yarn install
                            if [[ -n "$PARAM_OVERRIDE_COMMAND" ]]; then
                                echo "Running override package installation command:"
                                eval "$PARAM_OVERRIDE_COMMAND"
                            else
                                yarn install --frozen-lockfile
                            fi
                        environment:
                            PARAM_OVERRIDE_COMMAND: << parameters.override-ci-command >>
                            YARN_CACHE_FOLDER: << parameters.cache-path >>
                        name: Installing YARN packages
                        working_directory: <<parameters.app-dir>>
                    - when:
                        condition: << parameters.with-cache >>
                        steps:
                            - when:
                                condition: << parameters.cache-path >>
                                steps:
                                    - save_cache:
                                        key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                                        paths:
                                            - <<parameters.cache-path>>
                            - unless:
                                condition: << parameters.cache-path >>
                                steps:
                                    - save_cache:
                                        key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                                        paths:
                                            - <<parameters.app-dir>>/node_modules
            - when:
                condition:
                    equal:
                        - yarn-berry
                        - << parameters.pkg-manager >>
                steps:
                    - when:
                        condition:
                            equal:
                                - detect
                                - << parameters.check-cache >>
                        steps:
                            - restore_cache:
                                keys:
                                    - yarn-berry-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>{{ checksum "/tmp/yarn-zero-lockfile" }}
                                    - yarn-berry-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>
                    - run:
                        command: |-
                            # Run override ci command if provided, otherwise run default yarn install
                            # See: https://yarnpkg.com/configuration/yarnrc/#cacheFolder
                            if [[ -n "$PARAM_CACHE_PATH" ]]; then
                                yarn config set cacheFolder "$PARAM_CACHE_PATH"
                            fi

                            if [[ -n "$PARAM_OVERRIDE_COMMAND" ]]; then
                                echo "Running override package installation command:"
                                eval "$PARAM_OVERRIDE_COMMAND"
                            else
                                # If a cache folder is already present, then we use Yarn Zero installs
                                # See: https://yarnpkg.com/features/zero-installs
                                if [[ -e "$PARAM_CACHE_PATH" ]]; then
                                    # See: https://yarnpkg.com/features/zero-installs#does-it-have-security-implications
                                    YARN_LOCKFILE_PATH="/tmp/yarn-zero-lockfile"

                                    if [[ "$PARAM_CHECK_CACHE" == "detect" ]]; then
                                        if [[ ! -f "$YARN_LOCKFILE_PATH" ]]; then
                                            echo "No yarn zero lockfile cached. Enabling check cache this run."
                                            ENABLE_CHECK_CACHE="true"
                                            elif [[ $(diff -q "$YARN_LOCKFILE_PATH" yarn.lock) ]]; then
                                            echo "Detected changes in lockfile. Enabling check cache this run."
                                            rm -f "$YARN_LOCKFILE_PATH"
                                            ENABLE_CHECK_CACHE="true"
                                        else
                                            echo "No changes detected in lockfile. Skipping check cache this run."
                                        fi
                                    fi

                                    if [[ "$PARAM_CHECK_CACHE" == "always" || -n "$ENABLE_CHECK_CACHE" ]]; then
                                        set -- "$@" --check-cache
                                    fi

                                    yarn install --immutable --immutable-cache "$@"

                                    if [[ "$PARAM_CHECK_CACHE" == "detect" && -n "$ENABLE_CHECK_CACHE" ]]; then
                                        cp yarn.lock "$YARN_LOCKFILE_PATH"
                                    fi
                                else
                                    yarn install --immutable
                                fi
                            fi
                        environment:
                            PARAM_CACHE_PATH: << parameters.cache-path >>
                            PARAM_CHECK_CACHE: << parameters.check-cache >>
                            PARAM_OVERRIDE_COMMAND: << parameters.override-ci-command >>
                        name: Installing YARN packages
                        working_directory: <<parameters.app-dir>>
                    - when:
                        condition:
                            equal:
                                - detect
                                - << parameters.check-cache >>
                        steps:
                            - save_cache:
                                key: yarn-berry-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>{{ checksum "/tmp/yarn-zero-lockfile" }}
                                paths:
                                    - <<parameters.cache-path>>
                    - when:
                        condition: << parameters.with-cache >>
                        steps:
                            - when:
                                condition: << parameters.cache-path >>
                                steps:
                                    - save_cache:
                                        key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                                        paths:
                                            - <<parameters.cache-path>>
                            - unless:
                                condition: << parameters.cache-path >>
                                steps:
                                    - save_cache:
                                        key: node-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<^parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-package.json" }}-<</parameters.cache-only-lockfile>>{{ checksum "/tmp/node-project-lockfile" }}
                                        paths:
                                            - <<parameters.app-dir>>/.yarn/cache
            - when:
                condition: << parameters.with-cache >>
                steps:
                    - run:
                        command: rm -f /tmp/node-project-lockfile /tmp/node-project-package.json /tmp/yarn-zero-lockfile
                        name: Remove temporary links
    install-yarn:
        description: |
            Install a custom version of the Yarn package manager
        parameters:
            version:
                default: ""
                description: |
                    Pick a version of Yarn to install (if no version is specified, the latest stable version will be installed): https://github.com/yarnpkg/yarn/releases
                type: string
        steps:
            - run:
                command: |
                    if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

                    # FUNCTIONS
                    get_yarn_version () {
                        if [[ "$NODE_PARAM_YARN_VERSION" == "" ]]; then
                        YARN_ORB_VERSION=$(curl -s https://cdn.jsdelivr.net/npm/yarn/package.json | sed -n 's/.*version": "\(.*\)".*/\1/p')
                        echo "Latest version of Yarn is $YARN_ORB_VERSION"
                        else
                        YARN_ORB_VERSION="$NODE_PARAM_YARN_VERSION"

                        echo "Selected version of Yarn is $YARN_ORB_VERSION"
                        fi
                    }

                    installation_check () {
                        echo "Checking if YARN is already installed..."
                        if command -v yarn > /dev/null 2>&1; then
                        if yarn --version | grep "$YARN_ORB_VERSION" > /dev/null 2>&1; then
                            echo "Yarn $YARN_ORB_VERSION is already installed"
                            exit 0
                        else
                            echo "A different version of Yarn is installed ($(yarn --version)); removing it"

                            if uname -a | grep Darwin > /dev/null 2>&1; then
                            brew uninstall yarn > /dev/null 2>&1
                            elif grep Alpine /etc/issue > /dev/null 2>&1; then
                            apk del yarn > /dev/null 2>&1
                            elif grep Debian /etc/issue > /dev/null 2>&1; then
                            $SUDO apt-get remove yarn > /dev/null 2>&1 && \
                                $SUDO apt-get purge yarn > /dev/null 2>&1
                            elif grep Ubuntu /etc/issue > /dev/null 2>&1; then
                            $SUDO apt-get remove yarn > /dev/null 2>&1 && \
                                $SUDO apt-get purge yarn > /dev/null 2>&1
                            elif command -v yum > /dev/null 2>&1; then
                            yum remove yarn > /dev/null 2>&1
                            fi

                            $SUDO rm -rf "$HOME/.yarn" > /dev/null 2>&1
                            $SUDO rm -f /usr/local/bin/yarn /usr/local/bin/yarnpkg > /dev/null 2>&1
                        fi
                        fi
                    }

                    # cd to home so that yarn --version will not use relative installed yarn from .yarn/releases
                    cd ~ || echo "Cannot change directory to home directory, yarn version may be mismatched."

                    get_yarn_version
                    installation_check

                    # install yarn
                    echo "Installing YARN v$YARN_ORB_VERSION"
                    curl --retry 5 -L -o yarn.tar.gz --silent "https://yarnpkg.com/downloads/$YARN_ORB_VERSION/yarn-v$YARN_ORB_VERSION.tar.gz"

                    $SUDO tar -xzf yarn.tar.gz && rm yarn.tar.gz

                    $SUDO mkdir -p /opt/yarn
                    $SUDO mv yarn-v"${YARN_ORB_VERSION}"/* /opt/yarn

                    $SUDO rm -rf "yarn-v${YARN_ORB_VERSION}"

                    $SUDO chmod 777 "/opt/yarn"

                    $SUDO ln -s /opt/yarn/bin/yarn /usr/local/bin/yarn
                    $SUDO ln -s /opt/yarn/bin/yarnpkg /usr/local/bin/yarnpkg
                    $SUDO ln -s /opt/yarn/bin/yarn.js /usr/local/bin/yarn.js

                    $SUDO mkdir -p ~/.config

                    if uname -a | grep Darwin; then
                        $SUDO chown -R "$USER:$GROUP" ~/.config
                        $SUDO chown -R "$USER:$GROUP" /opt/yarn
                    else
                        $SUDO chown -R "$(whoami):$(whoami)" /opt/yarn
                        $SUDO chown -R "$(whoami):$(whoami)" ~/.config
                    fi

                    # test/verify version
                    echo "Verifying YARN install"
                    if yarn --version | grep "$YARN_ORB_VERSION" > /dev/null 2>&1; then
                        echo "Success! Yarn $(yarn --version) has been installed to $(command -v yarn)"
                    else
                        echo "Something went wrong; the specified version of Yarn could not be installed"
                        exit 1
                    fi
                environment:
                    NODE_PARAM_YARN_VERSION: <<parameters.version>>
                name: Install Yarn
executors:
    default:
        description: |
            Select the version of Node.js to use. Uses CircleCI's highly cached convenience images built for CI.
            Any available tag from this list can be used: https://hub.docker.com/r/cimg/node/tags
        docker:
            - image: cimg/node:<<parameters.tag>>
        parameters:
            resource_class:
                default: large
                description: Configure the executor resource class
                enum:
                    - small
                    - medium
                    - medium+
                    - large
                    - xlarge
                    - 2xlarge
                    - 2xlarge+
                type: enum
            tag:
                default: lts
                description: |
                    Pick a specific cimg/node image version tag: https://hub.docker.com/r/cimg/node
                type: string
        resource_class: << parameters.resource_class >>
jobs:
    run:
        description: |
            Simple drop-in job to run commands for your Node.js application automatically.
        executor:
            name: default
            resource_class: << parameters.resource_class >>
            tag: << parameters.version >>
        parameters:
            app-dir:
                default: ~/project
                description: Path to the directory containing your package.json file. Not needed if package.json lives in the root.
                type: string
            cache-version:
                default: v1
                description: Change the default cache version if you need to clear the cache for any reason.
                type: string
            npm-run:
                default: ""
                description: The name of the script within your package.json which you would like to run.
                type: string
            override-ci-command:
                default: ""
                description: |
                    By default, packages will be installed with "npm ci" or "yarn install --frozen-lockfile".
                    Optionally supply a custom package installation command, with any additional flags needed.
                type: string
            pkg-manager:
                default: npm
                description: Select the default node package manager to use.
                enum:
                    - npm
                    - yarn
                    - yarn-berry
                type: enum
            resource_class:
                default: large
                description: Configure the executor resource class
                enum:
                    - small
                    - medium
                    - medium+
                    - large
                    - xlarge
                    - 2xlarge
                    - 2xlarge+
                type: enum
            setup:
                default: []
                description: Provide any optional steps you would like to run prior to installing the node dependencies. This is a good place to install global modules.
                type: steps
            version:
                default: lts
                description: |
                    Pick a specific cimg/node image version tag: https://hub.docker.com/r/cimg/node
                type: string
            yarn-run:
                default: ""
                description: The name of the script within your package.json which you would like to run.
                type: string
        steps:
            - checkout
            - steps: << parameters.setup >>
            - install-packages:
                app-dir: <<parameters.app-dir>>
                cache-version: <<parameters.cache-version>>
                override-ci-command: <<parameters.override-ci-command>>
                pkg-manager: <<parameters.pkg-manager>>
            - run:
                command: |-
                    if [[ "$ORB_PARAM_PKG_MANAGER" == "npm" ]]; then
                        npm run "$ORB_PARAM_NPM_RUN"
                    else
                        yarn run "$ORB_PARAM_YARN_RUN"
                    fi
                environment:
                    ORB_PARAM_NPM_RUN: <<parameters.npm-run>>
                    ORB_PARAM_PKG_MANAGER: <<parameters.pkg-manager>>
                    ORB_PARAM_YARN_RUN: <<parameters.yarn-run>>
                name: Run <<parameters.pkg-manager>> <<parameters.npm-run>>
                working_directory: <<parameters.app-dir>>
    test:
        description: |
            Simple drop-in job to test your Node.js application automatically.
        executor:
            name: default
            resource_class: << parameters.resource_class >>
            tag: << parameters.version >>
        parameters:
            app-dir:
                default: ~/project
                description: Path to the directory containing your package.json file. Not needed if package.json lives in the root.
                type: string
            cache-version:
                default: v1
                description: Change the default cache version if you need to clear the cache for any reason.
                type: string
            override-ci-command:
                default: ""
                description: |
                    By default, packages will be installed with "npm ci" or "yarn install --frozen-lockfile".
                    Optionally supply a custom package installation command, with any additional flags needed.
                type: string
            pkg-manager:
                default: npm
                description: Select the default node package manager to use.
                enum:
                    - npm
                    - yarn
                    - yarn-berry
                type: enum
            resource_class:
                default: large
                description: Configure the executor resource class
                enum:
                    - small
                    - medium
                    - medium+
                    - large
                    - xlarge
                    - 2xlarge
                    - 2xlarge+
                type: enum
            run-command:
                default: test
                description: The name of the script within your package.json which will run your tests.
                type: string
            setup:
                default: []
                description: Provide any optional steps you would like to run prior to installing the node dependencies. This is a good place to install global modules.
                type: steps
            test-results-for:
                default: other
                description: |
                    Testing framework your project uses.
                    If this is set to jest or mocha, test results will be automatically produced. When using jest, the jest-junit package is required as a dev dependency. See https://github.com/jest-community/jest-junit for more information.
                    When using mocha, the mocha-junit-reporter and mocha-multi packages are required as dev dependency. See https://github.com/michaelleeallen/mocha-junit-reporter and https://github.com/glenjamin/mocha-multi for more information.
                enum:
                    - jest
                    - mocha
                    - other
                type: enum
            test-results-path:
                default: ""
                description: |
                    If you use test-results-for, this will be configured automatically.
                    If you configure test results yourself (for example in your node config files) set this to the location that you write them to, and they will be uploaded.
                type: string
            version:
                default: lts
                description: |
                    Pick a specific cimg/node image version tag: https://hub.docker.com/r/cimg/node
                type: string
        steps:
            - checkout
            - steps: << parameters.setup >>
            - install-packages:
                app-dir: <<parameters.app-dir>>
                cache-version: <<parameters.cache-version>>
                override-ci-command: <<parameters.override-ci-command>>
                pkg-manager: <<parameters.pkg-manager>>
            - when:
                condition:
                    and:
                        - equal:
                            - npm
                            - << parameters.pkg-manager >>
                        - equal:
                            - other
                            - << parameters.test-results-for >>
                steps:
                    - run:
                        command: npm run <<parameters.run-command>>
                        name: Run NPM Tests
                        working_directory: <<parameters.app-dir>>
            - when:
                condition:
                    and:
                        - equal:
                            - npm
                            - << parameters.pkg-manager >>
                        - equal:
                            - jest
                            - << parameters.test-results-for >>
                steps:
                    - run:
                        command: npm list jest-junit || (echo "Add the package jest-junit to the dev dependencies of your project with `npm install --save-dev jest-junit`" && exit 1)
                        name: Check for test reporter
                        working_directory: <<parameters.app-dir>>
                    - run:
                        command: npm run <<parameters.run-command>> -- --reporters=default --reporters=jest-junit
                        name: Run NPM Tests
                        working_directory: <<parameters.app-dir>>
            - when:
                condition:
                    and:
                        - equal:
                            - npm
                            - << parameters.pkg-manager >>
                        - equal:
                            - mocha
                            - << parameters.test-results-for >>
                steps:
                    - run:
                        command: npm list mocha-junit-reporter mocha-multi || (echo "Add the packages mocha-junit-reporter & mocha-multi to the dev dependencies of your project with `npm install --save-dev mocha-junit-reporter mocha-multi`" && exit 1)
                        name: Check for test reporter
                        working_directory: <<parameters.app-dir>>
                    - run:
                        command: npm run <<parameters.run-command>> -- --reporter mocha-multi --reporter-options spec=-,mocha-junit-reporter=-
                        name: Run NPM Tests
                        working_directory: <<parameters.app-dir>>
            - when:
                condition:
                    and:
                        - equal:
                            - yarn
                            - << parameters.pkg-manager >>
                        - equal:
                            - other
                            - << parameters.test-results-for >>
                steps:
                    - run:
                        command: yarn run <<parameters.run-command>>
                        name: Run YARN Tests
                        working_directory: <<parameters.app-dir>>
            - when:
                condition:
                    and:
                        - equal:
                            - yarn
                            - << parameters.pkg-manager >>
                        - equal:
                            - jest
                            - << parameters.test-results-for >>
                steps:
                    - run:
                        command: yarn list --pattern jest-junit | grep " jest-junit@" || (echo "Add the package jest-junit to your projects dev dependencies with `yarn add --dev jest-junit`" && exit 1)
                        name: Check for test reporter
                        working_directory: <<parameters.app-dir>>
                    - run:
                        command: yarn run <<parameters.run-command>> --reporters=default --reporters=jest-junit
                        name: Run YARN Tests
                        working_directory: <<parameters.app-dir>>
            - when:
                condition:
                    and:
                        - equal:
                            - yarn
                            - << parameters.pkg-manager >>
                        - equal:
                            - mocha
                            - << parameters.test-results-for >>
                steps:
                    - run:
                        command: yarn list --pattern "mocha-junit-reporter|mocha-multi" | grep "mocha-junit-reporter@\|mocha-multi@" || (echo "Add the packages mocha-junit-reporter & mocha-multi to the dev dependencies of your project with `yarn add --dev mocha-junit-reporter mocha-multi`" && exit 1)
                        name: Check for test reporter
                        working_directory: <<parameters.app-dir>>
                    - run:
                        command: yarn run <<parameters.run-command>> --reporter mocha-multi --reporter-options spec=-,mocha-junit-reporter=-
                        name: Run YARN Tests
                        working_directory: <<parameters.app-dir>>
            - when:
                condition:
                    and:
                        - equal:
                            - yarn-berry
                            - << parameters.pkg-manager >>
                        - equal:
                            - other
                            - << parameters.test-results-for >>
                steps:
                    - run:
                        command: yarn run <<parameters.run-command>>
                        name: Run YARN 2.x Tests
                        working_directory: <<parameters.app-dir>>
            - when:
                condition:
                    and:
                        - equal:
                            - yarn-berry
                            - << parameters.pkg-manager >>
                        - equal:
                            - jest
                            - << parameters.test-results-for >>
                steps:
                    - run:
                        command: yarn run <<parameters.run-command>> --reporters=default --reporters=jest-junit
                        name: Run YARN 2.x Tests
                        working_directory: <<parameters.app-dir>>
            - when:
                condition:
                    and:
                        - equal:
                            - yarn-berry
                            - << parameters.pkg-manager >>
                        - equal:
                            - mocha
                            - << parameters.test-results-for >>
                steps:
                    - run:
                        command: yarn list --pattern "mocha-junit-reporter|mocha-multi" | grep "mocha-junit-reporter@\|mocha-multi@" || (echo "Add the packages mocha-junit-reporter & mocha-multi to the dev dependencies of your project with `yarn add --dev mocha-junit-reporter mocha-multi`" && exit 1)
                        name: Check for test reporter
                        working_directory: <<parameters.app-dir>>
                    - run:
                        command: yarn run <<parameters.run-command>> --reporter mocha-multi --reporter-options spec=-,mocha-junit-reporter=-
                        name: Run YARN 2.x Tests
                        working_directory: <<parameters.app-dir>>
            - when:
                condition: << parameters.test-results-path >>
                steps:
                    store_test_results:
                        path: << parameters.test-results-path >>
            - when:
                condition:
                    and:
                        - equal:
                            - jest
                            - << parameters.test-results-for >>
                        - equal:
                            - ""
                            - << parameters.test-results-path >>
                steps:
                    store_test_results:
                        path: <<parameters.app-dir>>/junit.xml
            - when:
                condition:
                    and:
                        - equal:
                            - mocha
                            - << parameters.test-results-for >>
                        - equal:
                            - ""
                            - << parameters.test-results-path >>
                steps:
                    store_test_results:
                        path: <<parameters.app-dir>>/test-results.xml
examples:
    install_nodejs:
        description: |
            Download and install any version of Node.js. Optionally installs Yarn with a parameter. You may use the default executor of this orb for a Node execution environment as well.

            Recommendation: It is highly recommended to utilize an environment such as Docker with Node preinstalled.
        usage:
            version: "2.1"
            orbs:
                node: circleci/node@x.y
            jobs:
                install-node-example:
                    docker:
                        - image: cimg/base:stable
                    steps:
                        - checkout
                        - node/install:
                            install-yarn: true
                            node-version: "16.13"
                        - run: node --version
            workflows:
                test_my_app:
                    jobs:
                        - install-node-example
    jest_test_results:
        description: |
            Run tests with jest and produce and upload test reports.
            This assumes that you have configured your project to invoke jest as your test script and that you have the jest-junit package in your dev dependencies.
        usage:
            version: "2.1"
            orbs:
                node: circleci/node@x.y
            workflows:
                test:
                    jobs:
                        - node/test:
                            test-results-for: jest
    mocha_test_results:
        description: |
            Run tests with mocha and produce and upload test reports.
            This assumes that you have configured your project to invoke mocha as your test script and that you have the mocha-junit-reporter and mocha-multi packages in your dev dependencies.
        usage:
            version: "2.1"
            orbs:
                node: circleci/node@x.y
            workflows:
                test:
                    jobs:
                        - node/test:
                            test-results-for: mocha
    node_npm_run:
        description: |
            Drop-in solution to automatically run custom npm commands for your Node.js applications.
            This job will automatically download your code into any version node environment, install your dependencies with caching enabled, and execute your custom npm script.
        usage:
            version: "2.1"
            orbs:
                node: circleci/node@x.y
            workflows:
                run-npm-command:
                    jobs:
                        - node/run:
                            npm-run: build
    node_test_and_deploy:
        description: |
            Drop-in solution to automatically test your Node.js applications. This job will automatically download your code into any version node environment, install your dependencies with caching enabled, and execute your testing script.
            This example shows how easily with two orbs you can test your Node application and automatically deploy to Heroku when successful, and on the master branch.
        usage:
            version: "2.1"
            orbs:
                heroku: circleci/heroku@x.y
                node: circleci/node@x.y
            workflows:
                test-and-deploy:
                    jobs:
                        - node/test
                        - heroku/deploy-via-git:
                            filters:
                                branches:
                                    only:
                                        - master
                            requires:
                                - node/test
    node_yarn_run:
        description: |
            Drop-in solution to automatically run custom yarn commands for your Node.js applications.
            This job will automatically download your code into any version node environment, install your dependencies with caching enabled, and execute your custom yarn script.
        usage:
            version: "2.1"
            orbs:
                node: circleci/node@x.y
            workflows:
                run-npm-command:
                    jobs:
                        - node/run:
                            yarn-run: build
    npm_install:
        description: |
            By default, the "install-packages" command will attempt to utilize "npm ci". The command can however be overwritten to support an alternative package install command such as "npm install".
        usage:
            version: "2.1"
            orbs:
                node: circleci/node@x.y
            jobs:
                test:
                    executor: node/default
                    steps:
                        - checkout
                        - run: sudo npm install -g npm@latest
                        - node/install-packages:
                            cache-path: ~/project/node_modules
                            override-ci-command: npm install
                        - run: npm run test
            workflows:
                test_my_app:
                    jobs:
                        - test
    run_matrix_testing:
        description: |
            Easily test your application against multiple versions of Node.js in just a few lines. This example uses "Matrix" jobs to call the same node/test job multiple times at once, each eith the Node version we have specified.

            Read more here: https://circleci.com/blog/you-are-what-you-git-how-your-vcs-branching-model-affects-your-delivery-cadence/
        usage:
            version: "2.1"
            orbs:
                node: circleci/node@x.y
            workflows:
                matrix-tests:
                    jobs:
                        - node/test:
                            matrix:
                                parameters:
                                    version:
                                        - 13.11.0
                                        - 12.16.0
                                        - 10.19.0
    run_tests_with_npm:
        description: |
            How to quickly and easily run your Node.js tests on CircleCI with caching automatically included. This example assumes you are using NPM as your package manager.
            The "npm ci" command will automatically be applied and the "~/.npm" directory cached.
        usage:
            version: "2.1"
            orbs:
                node: circleci/node@x.y
            jobs:
                test:
                    executor:
                        name: node/default
                        tag: "13.14"
                    steps:
                        - checkout
                        - node/install-packages
                        - run:
                            command: npm run test
            workflows:
                test_my_app:
                    jobs:
                        - test
    run_tests_with_yarn:
        description: |
            Utilize the YARN package manager with the CircleCI Node orb. Caching of your Node packages is enabled by default.
        usage:
            version: "2.1"
            orbs:
                node: circleci/node@x.y
            jobs:
                test:
                    executor:
                        name: node/default
                        tag: "16"
                    steps:
                        - checkout
                        - node/install-packages:
                            pkg-manager: yarn
                        - run:
                            command: yarn run test
                            name: Run YARN tests
            workflows:
                test_my_app:
                    jobs:
                        - test
    test_results:
        description: |
            Run tests with jest and produce and upload test reports.
            This assumes that you have configured your project so that your test script will produce the junit.xml file.
        usage:
            version: "2.1"
            orbs:
                node: circleci/node@x.y
            workflows:
                test:
                    jobs:
                        - node/test:
                            test-results-path: junit.xml
    yarn_berry_zero_install:
        description: |
            Utilize the YARN v2 package manager + Zero installs with the CircleCI Node orb.
        usage:
            version: "2.1"
            orbs:
                node: circleci/node@x.y
            jobs:
                test:
                    executor:
                        name: node/default
                        tag: "16"
                    steps:
                        - checkout
                        - node/install-packages:
                            check-cache: always
                            pkg-manager: yarn-berry
                            with-cache: false
                        - run:
                            command: yarn run test
                            name: Run YARN tests
            workflows:
                test_my_app:
                    jobs:
                        - test

